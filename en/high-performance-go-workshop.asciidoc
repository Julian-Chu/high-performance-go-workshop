= High Performance Go Workshop
Dave Cheney <dave@cheney.net>
{revnumber}, {docdate}
:doctype: book
:docinfo: shared
:icons: font
:idprefix:
:sectids:
:appendix-caption: Appx
:sectanchors:
:sectlinks:
:sectnums:
:toc:
:stem:
:homepage: https://dave.cheney.net/high-performance-go-workshop/sydney-2019.html
:github: https://github.com/davecheney/high-performance-go-workshop
:source-highlighter: pygments

:numbered!:

== Overview

The goal for this workshop is to give you the tools you need to diagnose performance problems in your Go applications and fix them.

Through the day we'll work from the small -- learning how to write benchmarks, then profiling a small piece of code. Then step out and talk about the execution tracer, the garbage collector and tracing running applications. The remainder of the day will be a chance for you to ask questions, experiment with your own code.

[TIP]
====
You can find the latest version of this presentation at

{homepage}
====

=== Schedule

Here's the (approximate) schedule for the day.

[cols=2*,options="header"]
|=== 
| Start
| Description

| 09:00 | <<welcome>> and <<introduction,Introduction>>
| 09:30 | <<benchmarking>>
| 10:45	| Break (15 minutes)
| 11:00	| <<profiling>>
| 12:00	| Lunch (90 minutes)
| 13:30	| <<compiler-optimisation>>
| 14:30	| <<execution-tracer>>
| 15:30	| Break (15 minutes)
| 15:45	| <<memory-and-gc>>
| 16:15 | <<tips-and-tricks>>
| 16:30	| Exercises
| 16:45	| <<conclusion>>
| 17:00	| Close
|===

:leveloffset: +1

include::welcome.asciidoc[]

:numbered:

include::microprocessor-performance.asciidoc[]

include::benchmarking.asciidoc[]

include::profiling.asciidoc[]

include::compiler-optimisation.asciidoc[]

include::execution-tracer.asciidoc[]

include::memory-and-gc.asciidoc[]

include::tips-and-tricks.asciidoc[]

:leveloffset: -1

:numbered!:
[#conclusion]
== Final Questions and Conclusion

"Don't do it. +
Do it, but don't do it again. +
Do it less. +
Do it later. +
Do it when they're not looking. +
Do it concurrently. +
Do it cheaper."
-- http://www.brendangregg.com/methodology.html[Brendan Gregg]

=== Is it better to write clear code, or high performance code?

Iâ€™ve given this workshop in many countries and without exception the first question I get is?

_What is more important, readable code or high performance code?_

My retort is; 

_What is more important, love or money?_

I need to dissuade you of the necessity for writing the highest performance code, certainly if that comes at a cost to clarity, readability, or maintainablity. 

"Readable means reliable."
-- Rob Pike

Start with the simplest possible code.

_Measure_. Profile your code to identify the bottlenecks, _do not guess_.

If performance is good, _stop_. You don't need to optimise everything, only the hottest parts of your code.

"The fastest algorithm can frequently be replaced by one that is almost as fast and much easier to understand."
-- Douglas W. Jones

As your application grows, or your traffic pattern evolves, the performance hot spots will change.

Don't leave complex code that is not performance critical, rewrite it with simpler operations if the bottleneck moves elsewhere.

Always write the simplest code you can, the compiler is optimised for _normal_ code.

Shorter code is faster code; Go is not C++, do not expect the compiler to unravel complicated abstractions.

Shorter code is _smaller_ code; which is important for the CPU's cache.

Pay very close attention to allocations, avoid unnecessary allocation where possible.

"I can make things very fast if they don't have to be correct."
-- Russ Cox

Performance and reliability are equally important.

I see little value in making a very fast server that panics, deadlocks or OOMs on a regular basis.

Don't trade performance for reliability.